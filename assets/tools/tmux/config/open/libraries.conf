# Libraries are opened according to a two-letter code.
#
# The scheme is:
#
#   - Use the first letter of the first two hyphen-separated words.
#   - If there is only one word (no hyphen), then use the first and last letters.
#
# In case of conflict, simply disambiguate with CTRL and ALT on the second letter, yielding 4 slots:
#
#   - a     b (00)
#   - a   C-b (01)
#   - a   M-b (10)
#   - a C-M-b (11)

LIBRARIES=$PROJECTS/lisp

bind -T command_o l switch-client -T command_o_l

bind -T command_o_l a switch-client -T command_o_l_a
bind -T command_o_l b switch-client -T command_o_l_b
bind -T command_o_l c switch-client -T command_o_l_c
bind -T command_o_l d switch-client -T command_o_l_d
bind -T command_o_l e switch-client -T command_o_l_e
bind -T command_o_l f switch-client -T command_o_l_f
bind -T command_o_l h switch-client -T command_o_l_h
bind -T command_o_l i switch-client -T command_o_l_i
bind -T command_o_l l switch-client -T command_o_l_l
bind -T command_o_l m switch-client -T command_o_l_m
bind -T command_o_l o switch-client -T command_o_l_o
bind -T command_o_l p switch-client -T command_o_l_p
bind -T command_o_l r switch-client -T command_o_l_r
bind -T command_o_l s switch-client -T command_o_l_s
bind -T command_o_l t switch-client -T command_o_l_t
bind -T command_o_l w switch-client -T command_o_l_w
bind -T command_o_l x switch-client -T command_o_l_x
bind -T command_o_l * switch-client -T command_o_l_*

bind -T command_o_l_a Enter menu -T 'C-a o l a (Open a library)' -x P -y P -S - \
'Open anaphoric-#[#{@mnemonic-style}]v#[default]ariants' v {
      send -K C-M-a o l a v
}

bind -T command_o_l_b Enter menu -T 'C-a o l b (Open b library)' -x P -y P -S - \
'Open bubble-#[#{@mnemonic-style}]o#[default]perator-upwards' o {
      send -K C-M-a o l b o
} \
'Open bignam#[#{@mnemonic-style}]e#[default]'                 e {
      send -K C-M-a o l b e
}

bind -T command_o_l_c Enter menu -T 'C-a o l c (Open c library)' -x P -y P -S - \
'Open cartesian-#[#{@mnemonic-style}]p#[default]roduct-switch'       p {
      send -K C-M-a o l c   p
} \
'Open cesd#[#{@mnemonic-C-style}]i#[default]'                      C-i {
      send -K C-M-a o l c C-i
} \
'Open class-#[#{@mnemonic-style}]o#[default]ptions'                  o {
      send -K C-M-a o l c   o
} \
'Open compatible-#[#{@mnemonic-style}]m#[default]etaclasses'         m {
      send -K C-M-a o l c   m
} \
'Open clh#[#{@mnemonic-style}]s#[default]'                           s {
      send -K C-M-a o l c   s
} \
'Open canonicalized-#[#{@mnemonic-style}]i#[default]nitargs'         i {
      send -K C-M-a o l c   i
} \
'Open complex-#[#{@mnemonic-C-style}]s#[default]lots'              C-s {
      send -K C-M-a o l c C-s
} \
'Open common-#[#{@mnemonic-style}]l#[default]isp-symbols-comparison' l {
      send -K C-M-a o l c   l
}


bind -T command_o_l_d Enter menu -T 'C-a o l d (Open d library)' -x P -y P -S - \
'Open definitions-#[#{@mnemonic-style}]s#[default]ystems' s {
      send -K C-M-a o l d s
}

bind -T command_o_l_e Enter menu -T 'C-a o l e (Open e library)' -x P -y P -S - \
'Open enhanced-#[#{@mnemonic-style}]e#[default]val-when'            e {
      send -K C-M-a o l e   e
} \
'Open enhanced-#[#{@mnemonic-style}]m#[default]ultiple-value-bind'  m {
      send -K C-M-a o l e   m
} \
'Open evaled-#[#{@mnemonic-style}]w#[default]hen'                   w {
      send -K C-M-a o l e   w
} \
'Open enhanced-#[#{@mnemonic-style}]f#[default]ind-class'           f {
      send -K C-M-a o l e   f
} \
'Open enhanced-#[#{@mnemonic-C-style}]b#[default]oolean'          C-b {
      send -K C-M-a o l e C-b
} \
'Open enhanced-#[#{@mnemonic-style}]t#[default]ypep'                t {
      send -K C-M-a o l e   t
} \
'Open enhanced-#[#{@mnemonic-style}]d#[default]efclass'             d {
      send -K C-M-a o l e   d
} \
'Open explicit-#[#{@mnemonic-style}]b#[default]ind'                 b {
      send -K C-M-a o l e   b
} \
'Open ensure-#[#{@mnemonic-M-style}]m#[default]ethod-combination' M-m {
      send -K C-M-a o l e M-m
} \
'Open evaluated-#[#{@mnemonic-C-style}]f#[default]let'            C-f {
      send -K C-M-a o l e C-f
} \
'Open easy-#[#{@mnemonic-M-style}]b#[default]ackquote-nesting'    M-b {
      send -K C-M-a o l e M-b
}


bind -T command_o_l_f Enter menu -T 'C-a o l f (Open f library)' -x P -y P -S - \
'Open first-#[#{@mnemonic-style}]t#[default]ime-value'         t {
      send -K C-M-a o l f t
} \
'Open fakeni#[#{@mnemonic-style}]l#[default]'                  l {
      send -K C-M-a o l f l
} \
'Open first-#[#{@mnemonic-style}]c#[default]lass-lambda-lists' c {
      send -K C-M-a o l f c
}


bind -T command_o_l_h Enter menu -T 'C-a o l h (Open h library)' -x P -y P -S - \
'Open hexstream-html-doc-mode' h {
      send -K C-M-a o l h h
} \
'Open hextml'                  l {
      send -K C-M-a o l h l
} \
'Open hecss'                   s {
      send -K C-M-a o l h s
}


bind -T command_o_l_i Enter menu -T 'C-a o l i (Open i library)' -x P -y P -S - \
'Open it#[#{@mnemonic-style}]s#[default]'                                             s {
      send -K C-M-a o l i s
} \
'Open incognito-#[#{@mnemonic-style}]k#[default]eywords'                              k {
      send -K C-M-a o l i k
} \
'Open inheriting-#[#{@mnemonic-style}]r#[default]eaders'                              r {
      send -K C-M-a o l i r
}


bind -T command_o_l_l Enter menu -T 'C-a o l l (Open l library)' -x P -y P -S - \
'Open lispy-#[#{@mnemonic-style}]f#[default]ormat'                                    f {
      send -K C-M-a o l l f
} \
'Open looples#[#{@mnemonic-style}]s#[default]'                                        s {
      send -K C-M-a o l l s
}


bind -T command_o_l_m Enter menu -T 'C-a o l m (Open m library)' -x P -y P -S - \
'Open map-#[#{@mnemonic-style}]b#[default]ind'                                        b {
      send -K C-M-a o l m b
} \
'Open macro-#[#{@mnemonic-style}]l#[default]evel'                                     l {
      send -K C-M-a o l m l
} \
'Open multiple-#[#{@mnemonic-style}]v#[default]alue-variants'                         v {
      send -K C-M-a o l m v
}


bind -T command_o_l_o Enter menu -T 'C-a o l o (Open o library)' -x P -y P -S - \
'Open object-#[#{@mnemonic-style}]c#[default]lass'                                    c {
      send -K C-M-a o l o c
}


bind -T command_o_l_p Enter menu -T 'C-a o l p (Open p library)' -x P -y P -S - \
'Open positional-#[#{@mnemonic-style}]l#[default]ambda'                               l {
      send -K C-M-a o l p l
} \
'Open place-#[#{@mnemonic-style}]m#[default]odifiers'                                 m {
      send -K C-M-a o l p m
} \
'Open parse-#[#{@mnemonic-style}]n#[default]umber-range'                              n {
      send -K C-M-a o l p n
} \
'Open place-#[#{@mnemonic-style}]u#[default]tils'                                     u {
      send -K C-M-a o l p u
}


bind -T command_o_l_r Enter menu -T 'C-a o l r (Open r library)' -x P -y P -S - \
'Open return-#[#{@mnemonic-style}]v#[default]alues-hints'                             v {
      send -K C-M-a o l r v
}


bind -T command_o_l_s Enter menu -T 'C-a o l s (Open s library)' -x P -y P -S - \
'Open symbol-#[#{@mnemonic-style}]n#[default]amespaces'                               n {
      send -K C-M-a o l s n
} \
'Open simple-#[#{@mnemonic-style}]g#[default]uess'                                    g {
      send -K C-M-a o l s g
} \
'Open shared-#[#{@mnemonic-style}]p#[default]references'                              p {
      send -K C-M-a o l s p
}


bind -T command_o_l_t Enter menu -T 'C-a o l t (Open t library)' -x P -y P -S - \
'Open trivial-#[#{@mnemonic-style}]j#[default]umptables'                              j {
      send -K C-M-a o l t j
}


bind -T command_o_l_w Enter menu -T 'C-a o l w (Open w library)' -x P -y P -S - \
'Open with-#[#{@mnemonic-style}]o#[default]utput-to-stream'                           o {
      send -K C-M-a o l w o
} \
'Open with-#[#{@mnemonic-style}]s#[default]hadowed-bindings'                          s {
      send -K C-M-a o l w s
}


bind -T command_o_l_x Enter menu -T 'C-a o l x (Open x library)' -x P -y P -S - \
'Open xcal#[#{@mnemonic-style}]l#[default]'                                           l {
      send -K C-M-a o l x l
}


bind -T command_o_l_* Enter menu -T 'C-a o l * (Open subset of all public libraries)' -x P -y P -S - \
'Open all #[#{@mnemonic-style}]r#[default]eady-to-use libraries'      r {
      send -K C-M-a o l * r
} \
'Open all #[#{@mnemonic-style}]n#[default]ot-yet-ready libraries'     n {
      send -K C-M-a o l * n
} \
'Open all not-yet-#[#{@mnemonic-style}]s#[default]cavenged libraries' s {
      send -K C-M-a o l * s
} \
'Open #[#{@mnemonic-style}]all#[default] public libraries'            * {
      send -K C-M-a o l * *
} \
'----' ∅ ∅ \
'#[#{@mnemonic-C-M-style}]E#[default]dit' C-M-e {
      run-shell "emacsclient +236 -n $CONFIG/open/libraries.conf"
} \
'←' BSpace {
      send -K C-M-a o l Enter
}



bind -T command_o_l_a v {
     neww -n 'anaphoric-variants'              -c "$LIBRARIES/ready-to-use/anaphoric-variants/"
}


bind -T command_o_l_b o {
     neww -n 'bubble-operator-upwards'         -c "$LIBRARIES/ready-to-use/bubble-operator-upwards/"
}

bind -T command_o_l_b e {
     neww -n 'bigname'                         -c "$LIBRARIES/not-yet-ready/bigname/"
}


bind -T command_o_l_c   p {
     neww -n 'cartesian-product-switch'       -c "$LIBRARIES/ready-to-use/cartesian-product-switch/"
}

bind -T command_o_l_c C-i {
     neww -n 'cesdi'                          -c "$LIBRARIES/ready-to-use/cesdi/"
}

bind -T command_o_l_c   o {
     neww -n 'class-options'                  -c "$LIBRARIES/ready-to-use/class-options/"
}

bind -T command_o_l_c   m {
     neww -n 'compatible-metaclasses'         -c "$LIBRARIES/ready-to-use/compatible-metaclasses/"
}

bind -T command_o_l_c   s {
     neww -n 'clhs'                           -c "$LIBRARIES/ready-to-use/clhs/"
}

bind -T command_o_l_c   i {
     neww -n 'canonicalized-initargs'         -c "$LIBRARIES/ready-to-use/canonicalized-initargs/"
}

bind -T command_o_l_c C-s {
     neww -n 'complex-slots'                  -c "$LIBRARIES/not-yet-ready/complex-slots/"
}

bind -T command_o_l_c   l {
     neww -n 'common-lisp-symbols-comparison' -c "$LIBRARIES/not-yet-scavenged/common-lisp-symbols-comparison/"
}


bind -T command_o_l_d s {
     neww -n 'definitions-systems'            -c "$LIBRARIES/ready-to-use/definitions-systems/"
}


bind -T command_o_l_e   e {
     neww -n 'enhanced-eval-when'             -c "$LIBRARIES/ready-to-use/enhanced-eval-when/"
}

bind -T command_o_l_e   m {
     neww -n 'enhanced-multiple-value-bind'   -c "$LIBRARIES/ready-to-use/enhanced-multiple-value-bind/"
}

bind -T command_o_l_e   w {
     neww -n 'evaled-when'                    -c "$LIBRARIES/ready-to-use/evaled-when/"
}

bind -T command_o_l_e   f {
     neww -n 'enhanced-find-class'            -c "$LIBRARIES/ready-to-use/enhanced-find-class/"
}

bind -T command_o_l_e C-b {
     neww -n 'enhanced-boolean'               -c "$LIBRARIES/ready-to-use/enhanced-boolean/"
}

bind -T command_o_l_e   t {
     neww -n 'enhanced-typep'                 -c "$LIBRARIES/ready-to-use/enhanced-typep/"
}

bind -T command_o_l_e   d {
     neww -n 'enhanced-defclass'              -c "$LIBRARIES/ready-to-use/enhanced-defclass/"
}

bind -T command_o_l_e   b {
     neww -n 'explicit-bind'                  -c "$LIBRARIES/not-yet-ready/explicit-bind/"
}

bind -T command_o_l_e M-m {
     neww -n 'ensure-method-combination'      -c "$LIBRARIES/not-yet-ready/ensure-method-combination/"
}

bind -T command_o_l_e C-f {
     neww -n 'evaluated-flet'                 -c "$LIBRARIES/not-yet-ready/evaluated-flet/"
}

bind -T command_o_l_e M-b {
     neww -n 'easy-backquote-nesting'         -c "$LIBRARIES/not-yet-scavenged/easy-backquote-nesting/"
}


bind -T command_o_l_f t {
     neww -n 'first-time-value'               -c "$LIBRARIES/ready-to-use/first-time-value/"
}

bind -T command_o_l_f l {
     neww -n 'fakenil'                        -c "$LIBRARIES/ready-to-use/fakenil/"
}

bind -T command_o_l_f c {
     neww -n 'first-class-lambda-lists'       -c "$LIBRARIES/not-yet-ready/first-class-lambda-lists/"
}


bind -T command_o_l_h h {
     neww -n 'hexstream-html-doc-mode'        -c "$LIBRARIES/not-yet-ready/hexstream-html-doc-mode/"
}

bind -T command_o_l_h l {
     neww -n 'hextml'                         -c "$LIBRARIES/not-yet-scavenged/hextml/"
}

bind -T command_o_l_h s {
     neww -n 'hecss'                          -c "$LIBRARIES/not-yet-scavenged/hecss/"
}


bind -T command_o_l_i s {
     neww -n 'its'                            -c "$LIBRARIES/ready-to-use/its/"
}

bind -T command_o_l_i k {
     neww -n 'incognito-keywords'             -c "$LIBRARIES/ready-to-use/incognito-keywords/"
}

bind -T command_o_l_i r {
     neww -n 'inheriting-readers'             -c "$LIBRARIES/ready-to-use/inheriting-readers/"
}


bind -T command_o_l_l f {
     neww -n 'lispy-format'                   -c "$LIBRARIES/not-yet-ready/lispy-format/"
}

bind -T command_o_l_l s {
     neww -n 'loopless'                       -c "$LIBRARIES/not-yet-scavenged/loopless/"
}


bind -T command_o_l_m b {
     neww -n 'map-bind'                       -c "$LIBRARIES/ready-to-use/map-bind/"
}

bind -T command_o_l_m l {
     neww -n 'macro-level'                    -c "$LIBRARIES/ready-to-use/macro-level/"
}

bind -T command_o_l_m v {
     neww -n 'multiple-value-variants'        -c "$LIBRARIES/ready-to-use/multiple-value-variants/"
}


bind -T command_o_l_o c {
     neww -n 'object-class'                   -c "$LIBRARIES/ready-to-use/object-class/"
}


bind -T command_o_l_p l {
     neww -n 'positional-lambda'              -c "$LIBRARIES/ready-to-use/positional-lambda/"
}

bind -T command_o_l_p m {
     neww -n 'place-modifiers'                -c "$LIBRARIES/ready-to-use/place-modifiers/"
}

bind -T command_o_l_p n {
     neww -n 'parse-number-range'             -c "$LIBRARIES/ready-to-use/parse-number-range/"
}

bind -T command_o_l_p u {
     neww -n 'place-utils'                    -c "$LIBRARIES/ready-to-use/place-utils/"
}


bind -T command_o_l_r v {
     neww -n 'return-values-hints'            -c "$LIBRARIES/not-yet-scavenged/return-values-hints/"
}


bind -T command_o_l_s n {
     neww -n 'symbol-namespaces'              -c "$LIBRARIES/ready-to-use/symbol-namespaces/"
}

bind -T command_o_l_s g {
     neww -n 'simple-guess'                   -c "$LIBRARIES/ready-to-use/simple-guess/"
}

bind -T command_o_l_s p {
     neww -n 'shared-preferences'             -c "$LIBRARIES/ready-to-use/shared-preferences/"
}


bind -T command_o_l_t j {
     neww -n 'trivial-jumptables'             -c "$LIBRARIES/ready-to-use/trivial-jumptables/"
}


bind -T command_o_l_w o {
     neww -n 'with-output-to-stream'          -c "$LIBRARIES/ready-to-use/with-output-to-stream/"
}

bind -T command_o_l_w s {
     neww -n 'with-shadowed-bindings'         -c "$LIBRARIES/ready-to-use/with-shadowed-bindings/"
}


bind -T command_o_l_x l {
     neww -n 'xcall'                          -c "$LIBRARIES/not-yet-ready/xcall/"
}


bind -T command_o_l_* r {
     send -K C-M-a o l m b
     send -K C-M-a o l p l
     send -K C-M-a o l t j
     send -K C-M-a o l w o
     send -K C-M-a o l e e
     send -K C-M-a o l e m
     send -K C-M-a o l e w
     send -K C-M-a o l m l
     send -K C-M-a o l w s
     send -K C-M-a o l f t
     send -K C-M-a o l i s
     send -K C-M-a o l c p
     send -K C-M-a o l p m
     send -K C-M-a o l a v
     send -K C-M-a o l m v
     send -K C-M-a o l p n
     send -K C-M-a o l b o
     send -K C-M-a o l c C-i
     send -K C-M-a o l e f
     send -K C-M-a o l c o
     send -K C-M-a o l c m
     send -K C-M-a o l o c
     send -K C-M-a o l d s
     send -K C-M-a o l i k
     send -K C-M-a o l s n
     send -K C-M-a o l c s
     send -K C-M-a o l e C-b
     send -K C-M-a o l e t
     send -K C-M-a o l f l
     send -K C-M-a o l s g
     send -K C-M-a o l p u
     send -K C-M-a o l i r
     send -K C-M-a o l e d
     send -K C-M-a o l c i
     send -K C-M-a o l s p
     send -N 34 -K C-a p
}

bind -T command_o_l_* n {
     send -K C-M-a o l f c
     send -K C-M-a o l e b
     send -K C-M-a o l l f
     send -K C-M-a o l x l
     send -K C-M-a o l c C-s
     send -K C-M-a o l e M-m
     send -K C-M-a o l e C-f
     send -K C-M-a o l h h
     send -K C-M-a o l b e
     send -N 8 -K C-a p
}

bind -T command_o_l_* s {
     send -K C-M-a o l h l
     send -K C-M-a o l h s
     send -K C-M-a o l e M-b
     send -K C-M-a o l r v
     send -K C-M-a o l l s
     send -K C-M-a o l c l
     send -N 5 -K C-a p
}

bind -T command_o_l_* * {
     #WORKAROUND FOR send -K C-M-a o l * r
     send -K C-M-a o l m b
     send -K C-M-a o l p l
     send -K C-M-a o l t j
     send -K C-M-a o l w o
     send -K C-M-a o l e e
     send -K C-M-a o l e m
     send -K C-M-a o l e w
     send -K C-M-a o l m l
     send -K C-M-a o l w s
     send -K C-M-a o l f t
     send -K C-M-a o l i s
     send -K C-M-a o l c p
     send -K C-M-a o l p m
     send -K C-M-a o l a v
     send -K C-M-a o l m v
     send -K C-M-a o l p n
     send -K C-M-a o l b o
     send -K C-M-a o l c C-i
     send -K C-M-a o l e f
     send -K C-M-a o l c o
     send -K C-M-a o l c m
     send -K C-M-a o l o c
     send -K C-M-a o l d s
     send -K C-M-a o l i k
     send -K C-M-a o l s n
     send -K C-M-a o l c s
     send -K C-M-a o l e C-b
     send -K C-M-a o l e t
     send -K C-M-a o l f l
     send -K C-M-a o l s g
     send -K C-M-a o l p u
     send -K C-M-a o l i r
     send -K C-M-a o l e d
     send -K C-M-a o l c i
     send -K C-M-a o l s p
     send -N 34 -K C-a p

     #WORKAROUND FOR send -K C-M-a o l * n
     send -K C-M-a o l f c
     send -K C-M-a o l e b
     send -K C-M-a o l l f
     send -K C-M-a o l x l
     send -K C-M-a o l c C-s
     send -K C-M-a o l e M-m
     send -K C-M-a o l e C-f
     send -K C-M-a o l h h
     send -K C-M-a o l b e
     send -N 8 -K C-a p

     #WORKAROUND FOR send -K C-M-a o l * s
     send -K C-M-a o l h l
     send -K C-M-a o l h s
     send -K C-M-a o l e M-b
     send -K C-M-a o l r v
     send -K C-M-a o l l s
     send -K C-M-a o l c l
     send -N 5 -K C-a p

     send -N 44 -K C-a p
}


bind -T command_o_l Enter menu -T 'C-a o l (Open library)' -x P -y P -S - \
'Open #[#{@mnemonic-style}]a#[default]naphoric-#[#{@mnemonic-style}]v#[default]ariants#{@cont}' a {
      send -K C-M-a o l a Enter
} \
'Open #[#{@mnemonic-style}]b#[default]ubble-#[#{@mnemonic-style}]o#[default]perator-upwards or #[#{@mnemonic-style}]b#[default]ignam#[#{@mnemonic-style}]e#[default]#{@cont}' b {
      send -K C-M-a o l b Enter
} \
'Open #[#{@mnemonic-style}]c#[default]artesian-#[#{@mnemonic-style}]p#[default]roduct-switch, #[#{@mnemonic-style}]c#[default]esd#[#{@mnemonic-style}]i#[default], #[#{@mnemonic-style}]c#[default]lass-#[#{@mnemonic-style}]o#[default]ptions, #[#{@mnemonic-style}]c#[default]ompatible-#[#{@mnemonic-style}]m#[default]etaclasses, #[#{@mnemonic-style}]c#[default]lh#[#{@mnemonic-style}]s#[default],'  c {
      send -K C-M-a o l c Enter
} \
'     #[#{@mnemonic-style}]c#[default]anonicalized-#[#{@mnemonic-style}]i#[default]nitargs, #[#{@mnemonic-style}]c#[default]omplex-#[#{@mnemonic-C-style}]s#[default]lots or #[#{@mnemonic-style}]c#[default]ommon-#[#{@mnemonic-style}]l#[default]isp-symbols-comparison#{@cont}' c ∅ \
'Open #[#{@mnemonic-style}]d#[default]efinitions-#[#{@mnemonic-style}]s#[default]ystems#{@cont}' d {
      send -K C-M-a o l d Enter
} \
'Open #[#{@mnemonic-style}]e#[default]nhanced-#[#{@mnemonic-style}]e#[default]val-when, #[#{@mnemonic-style}]e#[default]nhanced-#[#{@mnemonic-style}]m#[default]ultiple-value-bind, #[#{@mnemonic-style}]e#[default]valed-#[#{@mnemonic-style}]w#[default]hen, #[#{@mnemonic-style}]e#[default]nhanced-#[#{@mnemonic-style}]f#[default]ind-class, #[#{@mnemonic-style}]e#[default]nhanced-#[#{@mnemonic-C-style}]b#[default]oolean, #[#{@mnemonic-style}]e#[default]nhanced-#[#{@mnemonic-style}]t#[default]ypep,'                                                       e {
     send -K C-M-a o l e Enter
} \
'     #[#{@mnemonic-style}]e#[default]nhanced-#[#{@mnemonic-style}]d#[default]efclass, #[#{@mnemonic-style}]e#[default]xplicit-#[#{@mnemonic-style}]b#[default]ind, #[#{@mnemonic-style}]e#[default]nsure-#[#{@mnemonic-C-style}]m#[default]ethod-combination, #[#{@mnemonic-style}]e#[default]valuated-#[#{@mnemonic-C-style}]f#[default]let or #[#{@mnemonic-style}]e#[default]asy-#[#{@mnemonic-M-style}]b#[default]ackquote-nesting#{@cont}' e ∅ \
'Open #[#{@mnemonic-style}]f#[default]irst-#[#{@mnemonic-style}]t#[default]ime-value, #[#{@mnemonic-style}]f#[default]akeni#[#{@mnemonic-style}]l#[default] or #[#{@mnemonic-style}]f#[default]irst-#[#{@mnemonic-style}]c#[default]lass-lambda-lists#{@cont}' f {
     send -K C-M-a o l f Enter
} \
'Open #[#{@mnemonic-style}]h#[default]exstream-#[#{@mnemonic-style}]h#[default]tml-doc-mode, #[#{@mnemonic-style}]h#[default]extm#[#{@mnemonic-style}]l#[default] or #[#{@mnemonic-style}]h#[default]ecs#[#{@mnemonic-style}]s#[default]#{@cont}'              h {
     send -K C-M-a o l h Enter
} \
'Open #[#{@mnemonic-style}]i#[default]t#[#{@mnemonic-style}]s#[default], #[#{@mnemonic-style}]i#[default]ncognito-#[#{@mnemonic-style}]k#[default]eywords or #[#{@mnemonic-style}]i#[default]nheriting-#[#{@mnemonic-style}]r#[default]eaders#{@cont}'         i {
     send -K C-M-a o l i Enter
} \
'Open #[#{@mnemonic-style}]l#[default]ispy-#[#{@mnemonic-style}]f#[default]ormat or #[#{@mnemonic-style}]l#[default]ooples#[#{@mnemonic-style}]s#[default]#{@cont}' l {
     send -K C-M-a o l l Enter
} \
'Open #[#{@mnemonic-style}]m#[default]ap-#[#{@mnemonic-style}]b#[default]ind, #[#{@mnemonic-style}]m#[default]acro-#[#{@mnemonic-style}]l#[default]evel or #[#{@mnemonic-style}]m#[default]ultiple-#[#{@mnemonic-style}]v#[default]alue-variants#{@cont}'      m {
     send -K C-M-a o l m Enter
} \
'Open #[#{@mnemonic-style}]o#[default]bject-#[#{@mnemonic-style}]c#[default]lass#{@cont}'        o {
     send -K C-M-a o l o Enter
} \
'Open #[#{@mnemonic-style}]p#[default]ositional-#[#{@mnemonic-style}]l#[default]ambda, #[#{@mnemonic-style}]p#[default]lace-#[#{@mnemonic-style}]m#[default]odifiers, #[#{@mnemonic-style}]p#[default]arse-#[#{@mnemonic-style}]n#[default]umber-range or #[#{@mnemonic-style}]p#[default]lace-#[#{@mnemonic-style}]u#[default]tils#{@cont}' p {
     send -K C-M-a o l p Enter
} \
'Open #[#{@mnemonic-style}]r#[default]eturn-#[#{@mnemonic-style}]v#[default]alues-hints#{@cont}' r {
     send -K C-M-a o l r Enter
} \
'Open #[#{@mnemonic-style}]s#[default]ymbol-#[#{@mnemonic-style}]n#[default]amespaces, #[#{@mnemonic-style}]s#[default]imple-#[#{@mnemonic-style}]g#[default]uess or #[#{@mnemonic-style}]s#[default]hared-#[#{@mnemonic-style}]p#[default]references#{@cont}' s {
     send -K C-M-a o l s Enter
} \
'Open #[#{@mnemonic-style}]t#[default]rivial-#[#{@mnemonic-style}]j#[default]umptables#{@cont}'  t {
     send -K C-M-a o l t Enter
} \
'Open #[#{@mnemonic-style}]w#[default]ith-#[#{@mnemonic-style}]o#[default]utput-to-stream or #[#{@mnemonic-style}]w#[default]ith-#[#{@mnemonic-style}]s#[default]hadowed-bindings#{@cont}' w {
     send -K C-M-a o l w Enter
} \
'Open #[#{@mnemonic-style}]x#[default]cal#[#{@mnemonic-style}]l#[default]#{@cont}'               x {
     send -K C-M-a o l x Enter
} \
'----' ∅ ∅ \
'Open subset of #[#{@mnemonic-style}]all#[default] public libraries#{@cont}'                     * {
     send -K C-M-a o l * Enter
} \
'#[#{@mnemonic-C-M-style}]E#[default]dit' C-M-e {
     run-shell "emacsclient +539 -n $CONFIG/open/libraries.conf"
} \
'←' BSpace {
      send -K C-M-a o Enter
}
