# I use this to quickly set up new windows for any of my ready-to-use libraries.

# C-a o p l m b (open map-bind)
bind -c hexstream-open-library_m b eval 'screen -t "map-bind"' 'stuff "cd lisp/ready-to-use/map-bind/^M^L"'

# C-a o p l p l (open positional-lambda)
bind -c hexstream-open-library_p l eval 'screen -t "positional-lambda"' 'stuff "cd lisp/ready-to-use/positional-lambda/^M^L"'

# C-a o p l t j (open trivial-jumptables)
bind -c hexstream-open-library_t j eval 'screen -t "trivial-jumptables"' 'stuff "cd lisp/ready-to-use/trivial-jumptables/^M^L"'

# C-a o p l w o (open with-output-to-stream)
bind -c hexstream-open-library_w o eval 'screen -t "with-output-to-stream"' 'stuff "cd lisp/ready-to-use/with-output-to-stream/^M^L"'

# C-a o p l e e (open enhanced-eval-when)
bind -c hexstream-open-library_e e eval 'screen -t "enhanced-eval-when"' 'stuff "cd lisp/ready-to-use/enhanced-eval-when/^M^L"'

# C-a o p l e m (open enhanced-multiple-value-bind)
bind -c hexstream-open-library_e m eval 'screen -t "enhanced-multiple-value-bind"' 'stuff "cd lisp/ready-to-use/enhanced-multiple-value-bind/^M^L"'

# C-a o p l e w (open evaled-when)
bind -c hexstream-open-library_e w eval 'screen -t "evaled-when"' 'stuff "cd lisp/ready-to-use/evaled-when/^M^L"'

# C-a o p l m l (open macro-level)
bind -c hexstream-open-library_m l eval 'screen -t "macro-level"' 'stuff "cd lisp/ready-to-use/macro-level/^M^L"'

# C-a o p l w s (open with-shadowed-bindings)
bind -c hexstream-open-library_w s eval 'screen -t "with-shadowed-bindings"' 'stuff "cd lisp/ready-to-use/with-shadowed-bindings/^M^L"'

# C-a o p l f t (open first-time-value)
bind -c hexstream-open-library_f t eval 'screen -t "first-time-value"' 'stuff "cd lisp/ready-to-use/first-time-value/^M^L"'

# C-a o p l i s (open its)
bind -c hexstream-open-library_i s eval 'screen -t "its"' 'stuff "cd lisp/ready-to-use/its/^M^L"'

# C-a o p l c p (open cartesian-product-switch)
bind -c hexstream-open-library_c p eval 'screen -t "cartesian-product-switch"' 'stuff "cd lisp/ready-to-use/cartesian-product-switch/^M^L"'

# C-a o p l p m (open place-modifiers)
bind -c hexstream-open-library_p m eval 'screen -t "place-modifiers"' 'stuff "cd lisp/ready-to-use/place-modifiers/^M^L"'

# C-a o p l a v (open anaphoric-variants)
bind -c hexstream-open-library_a v eval 'screen -t "anaphoric-variants"' 'stuff "cd lisp/ready-to-use/anaphoric-variants/^M^L"'

# C-a o p l m v (open multiple-value-variants)
bind -c hexstream-open-library_m v eval 'screen -t "multiple-value-variants"' 'stuff "cd lisp/ready-to-use/multiple-value-variants/^M^L"'

# C-a o p l p n (open parse-number-range)
bind -c hexstream-open-library_p n eval 'screen -t "parse-number-range"' 'stuff "cd lisp/ready-to-use/parse-number-range/^M^L"'

# C-a o p l b o (open bubble-operator-upwards)
bind -c hexstream-open-library_b o eval 'screen -t "bubble-operator-upwards"' 'stuff "cd lisp/ready-to-use/bubble-operator-upwards/^M^L"'

# C-a o p l c d (open cesdi) (c d, not c i)
bind -c hexstream-open-library_c d eval 'screen -t "cesdi"' 'stuff "cd lisp/ready-to-use/cesdi/^M^L"'

# C-a o p l e f (open enhanced-find-class)
bind -c hexstream-open-library_e f eval 'screen -t "enhanced-find-class"' 'stuff "cd lisp/ready-to-use/enhanced-find-class/^M^L"'

# C-a o p l c o (open class-options)
bind -c hexstream-open-library_c o eval 'screen -t "class-options"' 'stuff "cd lisp/ready-to-use/class-options/^M^L"'

# C-a o p l c m (open compatible-metaclasses)
bind -c hexstream-open-library_c m eval 'screen -t "compatible-metaclasses"' 'stuff "cd lisp/ready-to-use/compatible-metaclasses/^M^L"'

# C-a o p l o c (open object-class)
bind -c hexstream-open-library_o c eval 'screen -t "object-class"' 'stuff "cd lisp/ready-to-use/object-class/^M^L"'

# C-a o p l d s (open definitions-systems)
bind -c hexstream-open-library_d s eval 'screen -t "definitions-systems"' 'stuff "cd lisp/ready-to-use/definitions-systems/^M^L"'

# C-a o p l i k (open incognito-keywords)
bind -c hexstream-open-library_i k eval 'screen -t "incognito-keywords"' 'stuff "cd lisp/ready-to-use/incognito-keywords/^M^L"'

# C-a o p l s n (open symbol-namespaces)
bind -c hexstream-open-library_s n eval 'screen -t "symbol-namespaces"' 'stuff "cd lisp/ready-to-use/symbol-namespaces/^M^L"'

# C-a o p l c s (open clhs)
bind -c hexstream-open-library_c s eval 'screen -t "clhs"' 'stuff "cd lisp/ready-to-use/clhs/^M^L"'

# C-a o p l e n (open enhanced-boolean) (e n, not e b)
bind -c hexstream-open-library_e n eval 'screen -t "enhanced-boolean"' 'stuff "cd lisp/ready-to-use/enhanced-boolean/^M^L"'

# C-a o p l e t (open enhanced-typep)
bind -c hexstream-open-library_e t eval 'screen -t "enhanced-typep"' 'stuff "cd lisp/ready-to-use/enhanced-typep/^M^L"'

# C-a o p l f l (open fakenil)
bind -c hexstream-open-library_f l eval 'screen -t "fakenil"' 'stuff "cd lisp/ready-to-use/fakenil/^M^L"'

# C-a o p l s g (open simple-guess)
bind -c hexstream-open-library_s g eval 'screen -t "simple-guess"' 'stuff "cd lisp/ready-to-use/simple-guess/^M^L"'

# C-a o p l p u (open place-utils)
bind -c hexstream-open-library_p u eval 'screen -t "place-utils"' 'stuff "cd lisp/ready-to-use/place-utils/^M^L"'

# C-a o p l i r (open inheriting-readers)
bind -c hexstream-open-library_i r eval 'screen -t "inheriting-readers"' 'stuff "cd lisp/ready-to-use/inheriting-readers/^M^L"'

# C-a o p l e d (open enhanced-defclass)
bind -c hexstream-open-library_e d eval 'screen -t "enhanced-defclass"' 'stuff "cd lisp/ready-to-use/enhanced-defclass/^M^L"'

# C-a o p l c i (open canonicalized-initargs)
bind -c hexstream-open-library_c i eval 'screen -t "canonicalized-initargs"' 'stuff "cd lisp/ready-to-use/canonicalized-initargs/^M^L"'

# C-a o p l s p (open shared-preferences)
bind -c hexstream-open-library_s p eval 'screen -t "shared-preferences"' 'stuff "cd lisp/ready-to-use/shared-preferences/^M^L"'
